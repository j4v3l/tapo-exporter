name: 🧪 Test & Quality Checks

on:
  push:
    branches:
      - '**'
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/test.yml'
  pull_request:
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/test.yml'
  workflow_dispatch:

jobs:
  lint:
    name: 🧹 Code Style & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml

      - name: 🔄 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: 🖌️ Check formatting with Black
        run: black . --check --diff

      - name: 🔤 Check imports with isort
        run: isort . --check-only --diff

      - name: 🔍 Lint with flake8
        run: flake8 .

      - name: 📐 Type check with mypy
        run: mypy .

  test:
    name: 🧪 Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml

      - name: 🔄 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: 🧪 Run tests
        run: |
          pytest tests/ -v --cov=tapo_exporter --cov-report=xml:coverage.xml --cov-report=term-missing

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🔄 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: 🔍 Run Bandit security scan
        run: |
          bandit -r tapo_exporter/ -f json -o bandit-results.json || true
          bandit -r tapo_exporter/ -f txt || true

      - name: 📄 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.json
          category: bandit

      - name: 🔬 Check dependencies for vulnerabilities
        run: |
          safety check -r requirements.txt -r requirements-dev.txt --json > safety-results.json || true
          safety check -r requirements.txt -r requirements-dev.txt || true

      - name: 📦 Upload Dependency Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: safety-results
          path: safety-results.json 