name: CI/CD Pipeline

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]
  release:
    types: [published]

env:
  DOCKER_IMAGE: j4v3l/tapo-exporter
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
        
  #   - name: Run tests
  #     run: |
  #       pytest tests/ -v --cov=tapo_exporter --cov-report=term-missing

        
  #   - name: Run linting
  #     run: |
  #       black . --check
  #       isort . --check-only
  #       flake8 .
  #       mypy .

  build-and-push:
    # needs: test  # Temporarily removed test dependency
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        driver-opts: |
          image=moby/buildkit:latest
          network=host
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libffi-dev python3-dev
        sudo apt-get clean
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/dev' }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=beta,enable=${{ github.ref == 'refs/heads/dev' }}
          type=ref,event=branch
          type=sha,format=short
          
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ github.event.repository.created_at }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.ref_name }}
          DESCRIPTION="A Prometheus and InfluxDB exporter for Tapo smart devices"
          CATEGORY="monitoring"
          
  release:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get latest version
      id: get_version
      run: |
        # Get the latest version from git tags
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        # Extract version numbers
        major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
        minor=$(echo $latest_tag | cut -d. -f2)
        patch=$(echo $latest_tag | cut -d. -f3)
        
        # Get commit messages since last tag
        commit_messages=$(git log $latest_tag..HEAD --pretty=format:"%s")
        
        # Determine version increment based on commit messages
        if echo "$commit_messages" | grep -q "BREAKING CHANGE\|!:"; then
          # Major version bump for breaking changes
          new_major=$((major + 1))
          new_minor=0
          new_patch=0
          echo "Breaking change detected, bumping major version"
        elif echo "$commit_messages" | grep -q "feat:"; then
          # Minor version bump for new features
          new_major=$major
          new_minor=$((minor + 1))
          new_patch=0
          echo "New feature detected, bumping minor version"
        else
          # Patch version bump for fixes and other changes
          new_major=$major
          new_minor=$minor
          new_patch=$((patch + 1))
          echo "Bumping patch version"
        fi
        
        new_version="v$new_major.$new_minor.$new_patch"
        echo "New version: $new_version"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.NEW_VERSION }}
        name: Release ${{ env.NEW_VERSION }}
        body: |
          ## What's Changed
          
          ### Breaking Changes
          ${{ contains(github.event.head_commit.message, 'BREAKING CHANGE') && format('🚨 {0}', github.event.head_commit.message) || 'None' }}
          
          ### New Features
          ${{ contains(github.event.head_commit.message, 'feat:') && format('✨ {0}', github.event.head_commit.message) || 'None' }}
          
          ### Bug Fixes
          ${{ contains(github.event.head_commit.message, 'fix:') && format('🐛 {0}', github.event.head_commit.message) || 'None' }}
          
          ### Other Changes
          ${{ !contains(github.event.head_commit.message, 'BREAKING CHANGE') && !contains(github.event.head_commit.message, 'feat:') && !contains(github.event.head_commit.message, 'fix:') && format('📝 {0}', github.event.head_commit.message) || 'None' }}
          
          ## Docker Image
          The Docker image is available at: `${{ env.DOCKER_IMAGE }}:${{ env.NEW_VERSION }}`
          
          ## Installation
          ```bash
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.NEW_VERSION }}
          ```
        generate_release_notes: true
        files: |
          VERSION
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 